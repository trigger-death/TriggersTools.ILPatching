{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ILPatch",
  "fileTypes": [
    "ilpatch",
    "ILPATCH"
  ],
	"patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#ilpattern"
    },
		{
			"include": "#comment"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
    "ilpattern": {
      "name": "constant.regexp.ilpatch",
      "begin": "`",
      "end": "`",
      "patterns": [
    		{
    			"include": "#comment"
    		},
    		{
    			"include": "#strings"
    		},
        {
    			"include": "#captures"
    		},
        {
          "include": "#numerics"
        },
        {
          "include": "#opcodes"
        },
        {
          "include": "#tokens"
        },
        {
          "include": "#checks"
        },
        {
          "include": "#groups"
        },
        {
          "include": "#quantifiers"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword",
          "match": "(?:var)"
        },
        {
          "name": "support.class",
          "match": "(?:MATCH|REPLACE|ISMATCH)"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
					"captures": {
						"1": {
							"name": "meta.toc-list.banner.block.ilpatch"
						}
					},
					"match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
					"name": "comment.block.ilregex"
				},
				{
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.ilpatch"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.ilpatch"
						}
					},
					"name": "comment.block.ilpatch"
				},
				{
					"match": "\\*/.*\\n",
					"name": "invalid.illegal.stray-comment-end.ilpatch"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.cpp"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.cpp"
								}
							},
							"end": "(?=\\n)",
							"name": "comment.line.double-slash.cpp"
						}
          ]
        }
      ]
    },
		"strings": {
			"name": "string.regexp.ilregex",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ilregex",
					"match": "\\\\."
				}
			]
		},
		"captures": {
			"name": "variable",
			"begin": "'",
			"end": "'",
			"patterns": [
        {
          "name": "variable",
          "match": "[A-Za-z]\\w*(?=')"
        },
        {
          "name": "invalid.capture.name.ilregex",
          "match": ".*(?=')"
        }
			]
		},
    "numerics": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b\\d+[Ll]\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b\\d+[Bb]\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b\\d+[Ss][Bb]\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b(?:\\d*\\.)?\\d+[Ff]\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b(?:\\d*\\.)?\\d+[Dd]|\\d*\\.\\d+\\b"
        }
      ]
    },
    "opcodes": {
      "patterns": [
        {
          "name": "keyword.control",
          "match": "(?<=[^\\w%.]|^)(?:a(?:dd(?:\\.ovf(?:\\.un)?)?|nd|rglist)|b(?:eq(?:\\.s)?|[gl][et](?:\\.(?:s|un(?:\\.s)?))?|ne\\.un(?:\\.s)?|ox|r(?:\\.s|eak|false(?:\\.s)?|inst(?:\\.s)?|null(?:\\.s)?|true(?:\\.s)?|zero(?:\\.s)?)?)|c(?:a(?:ll(?:i|virt)?|stclass)|eq|[gl]t(?:\\.un)?|kfinite|on(?:strained\\.?|v\\.(?:[iu][1248]?|ovf\\.[iu](?:\\.un|[1248](?:\\.un)?)?|r(?:\\.un|[48])))|p(?:blk|obj))|d(?:iv(?:\\.un)?|up)|endfi(?:lter|nally)|i(?:nit(?:blk|obj)|sinst)|jmp|l(?:d(?:arg(?:\\.[0-3s]|a(?:\\.s)?)?|c\\.(?:i(?:4(?:\\.(?:[0-8s]|[Mm]1))?|8)|r[48])|elem(?:\\.(?:any|i[1248]?|r(?:[48]|ef)|u[1248])|a)|f(?:lda?|tn)|ind\\.(?:i[1248]?|r(?:[48]|ef)|u[1248])|l(?:en|oc(?:\\.[0-3s]|a(?:\\.s)?)?)|null|obj|s(?:flda?|tr)|token|virtftn)|eave(?:\\.s)?|ocalloc)|m(?:krefany|ul(?:\\.ovf(?:\\.un)?)?)|n(?:e(?:g|w(?:arr|obj))|o[\\.pt]?)|or|pop|re(?:adonly\\.?|fany(?:type|val)|m(?:\\.un)?|t(?:hrow)?)|s(?:h(?:l|r(?:\\.un)?)|izeof|t(?:arg(?:\\.s)?|elem\\.(?:any|i[1248]?|r(?:[48]|ef))|fld|ind\\.(?:i[1248]?|r(?:[48]|ef))|loc(?:\\.[0-3s])?|obj|sfld)|ub(?:\\.ovf(?:\\.un)?)?|witch)|t(?:ail\\.?|hrow)|un(?:aligned|box(?:\\.any)?)|volatile\\.?|xor)(?=[^\\w%.]|$)"
        },
        {
          "name": "keyword",
          "match": "(?<=[^\\w%.]|^)\\%(?:any|b(?:eq|[gl][et](?:\\.un)?|ne\\.un|r(?:false|inst|null|true|zero)?)|invalid|l(?:d(?:arga?|c\\.i4|loca?)|eave)|st(?:arg|loc))(?=[^\\w%.]|$)"
        }
      ]
    },
    "tokens": {
      "patterns": [
        {
          "name": "keyword.control.anchor.regexp",
          "match": "\\^"
        },
        {
          "name": "keyword.control.anchor.regexp",
          "match": "\\$"
        },
        {
          "name": "keyword.control.anchor.regexp",
          "match": "\\."
        }
      ]
    },
    "checks": {
      "patterns": [
        {
          "match": "(<)(?:(nop|op|c(?:ap|eq)|fld|mth|typ|cls)|([^\\s>]*))",
          "captures": {
            "1": {
              "name": "keyword.control.anchor.regexp"
            },
            "2": {
              "name": "keyword.control.anchor.regexp"
            },
            "3": {
              "name": "invalid.unknown.opcheck.ilregex"
            },
            "4": {
              "patterns": [
                {
                  "include": "#strings"
                },
                {
                  "include": "#captures"
                },
                {
                  "include": "#numerics"
                },
                {
                  "include": "#opcodes"
                },
                {
                  "include": "#comments"
                }
              ]
            }
          }
        },
        {
          "name": "keyword.control.anchor.regexp",
          "match": ">"
        }
      ]
    },
    "groups": {
      "patterns": [
        {
          "name": "punctuation.definition.group.regexp",
          "match": "\\((\\?:?)?"
        },
        {
          "name": "punctuation.definition.group.regexp",
          "match": "\\)"
        },
        {
          "name": "punctuation.definition.group.regexp",
          "match": "\\|"
        }
      ]
    },
    "quantifiers": {
      "patterns": [
        {
          "name": "keyword.operator.quantifier.regexp",
          "match": "([?*+]|\\{\\d+((,)\\d*)?\\})\\??"
        }
      ]
    }
	},
	"scopeName": "source.ilpatch"
}